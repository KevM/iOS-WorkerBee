//
//  PerfTestScenario6.m
//  Worker Bee
//
//  Created by Ashvinder Singh on 2/12/14.
//  Copyright (c) 2014 Couchbase, Inc. All rights reserved.
//

#import <malloc/malloc.h>
#import "Test6_PushReplication.h"
#import <CouchbaseLite/CouchbaseLite.h>

@implementation Test6_PushReplication
{
    bool replicationRunning;
}

+ (BOOL) isSkip {
    return true;
}


- (void) pushReplicationChanged: (NSNotificationCenter*)n {

   // Uncomment the following 3 lines to see the progress of replication
   // unsigned completed = self.push.completedChangesCount;
   // unsigned total = self.push.changesCount;
   // [self logFormat: @"Completed %d Out of total %d",completed,total];
    
   if (self.push.status == kCBLReplicationStopped) {
       // If do not see this line, it means there is no error
       if (self.push.lastError)
          [self logFormat: @"Replication Stopped and error found - %@", self.push.lastError];
       replicationRunning = NO;
   }
}

- (double) runOne:(int)kNumberOfDocuments sizeOfDocuments:(int)kSizeofDocument {
    NSDictionary* testCaseConfig = [[BeeTest config] objectForKey:NSStringFromClass([self class])];
    NSString* syncGatewayUrl = [testCaseConfig  objectForKey:@"sync_gateway_url"];
    [self logFormat: @"Starting Test %@ - Sync_gateway %@", [self class], syncGatewayUrl];

    for (int i = 0; i < 2; ++i) {
        [self logFormat: @"==============================="];
        // To delete the data
        //[self deleteDatabase];
        
        @autoreleasepool {
            NSMutableData* utf8 = [NSMutableData dataWithLength: kSizeofDocument];
            memset(utf8.mutableBytes, '1', utf8.length);
            NSString* str = [[NSString alloc] initWithData: utf8 encoding: NSUTF8StringEncoding];
            NSDictionary* props = @{@"k": str};
            
            [self.database inTransaction:^BOOL{
                for (int j = 0; j < kNumberOfDocuments; j++) {
                    @autoreleasepool {
                        CBLDocument* doc = [self.database createDocument];
                        NSError* error;
                        if (![doc putProperties: props error: &error]) {
                            [self logFormat: @"!!! Failed to create doc %@", props];
                            self.error = error;
                        }
                    }
                }
                return YES;
            }];
        }
        
        @autoreleasepool {
            NSURL *syncGateway  = [NSURL URLWithString:syncGatewayUrl];
            self.push = [self.database createPushReplication: syncGateway];
            [self logFormat: @"Starting Push Replication"];
            
            // Start measuring time from here
            //NSDate* start = [NSDate date];
            [self.push start];
            NSNotificationCenter* nctr = [NSNotificationCenter defaultCenter];
            [nctr addObserver: self selector: @selector(pushReplicationChanged:)
                         name: kCBLReplicationChangeNotification object: self.push];
           [self logFormat: @"11111111111"];
            replicationRunning = YES;
            while (replicationRunning) {
                [[NSRunLoop currentRunLoop] runMode: NSDefaultRunLoopMode
                                         beforeDate: [NSDate dateWithTimeIntervalSinceNow: 1.0]];
            }
           [self logFormat: @"22222222"];
            //NSDate *methodFinish = [NSDate date];
            [self logFormat: @"Replication Stopped"];
            //NSTimeInterval executionTime = [methodFinish timeIntervalSinceDate:start] * 1000;
            //return executionTime;
            [self deleteDatabase];
        }
    }
    return 0;
}

- (void) setUp {
    [super setUp];
    self.heartbeatInterval = 1.0;
}

@end
